{"version":3,"file":"autotag.min.js","sources":["../src/autotag.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module for the AutoTag feature.\n *\n * @module     local_autotag/autotag\n * @copyright  2025 Christian Gr√©visse <christian.grevisse@uni.lu>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Selectors from 'local_autotag/selectors';\n\nclass AutoTag {\n    constructor(resourceID) {\n        this.resourceID = resourceID;\n        this.registerEventListeners();\n        this.hideErrorMessage();\n    }\n\n    registerEventListeners() {\n        const tagger = document.querySelector(Selectors.ELEMENTS.AUTOTAGBUTTON);\n        if (tagger) {\n            tagger.addEventListener('click', async() => {\n\n                this.hideErrorMessage();\n\n                tagger.setAttribute('disabled', 'disabled');\n                const oldText = tagger.innerHTML;\n                tagger.innerHTML = '<i class=\"fa fa-spinner fa-spin\"></i>';\n\n                const request = {\n                    methodname: 'local_autotag_tag_resource',\n                    args: {\n                        resourceid: this.resourceID,\n                    }\n                };\n\n                try {\n                    const responseObj = await Ajax.call([request])[0];\n                    if (responseObj.error) {\n                        this.showErrorMessage(responseObj.error.exception.message);\n                    } else {\n                        // Add received tags.\n                        const tagField = document.querySelector(Selectors.ELEMENTS.TAGFIELD);\n\n                        if (!tagField) {\n                            // Tag field not found, should never happen.\n                            return;\n                        }\n\n                        const enterEvent = new KeyboardEvent('keydown', {\n                            code: 'Enter',\n                            key: 'Enter',\n                            charKode: 13,\n                            keyCode: 13,\n                            view: window\n                        });\n\n                        for (const tag of responseObj) {\n                            tagField.value = tag;\n                            tagField.dispatchEvent(enterEvent);\n                        }\n\n                        // Open \"Tags\" section.\n                        const tagSection = document.querySelector(Selectors.ELEMENTS.TAGSECTION);\n                        const tagSectionLink = document.querySelector(Selectors.ELEMENTS.TAGSECTIONLINK);\n\n                        if (tagSection && !tagSection.classList.contains('show') && tagSectionLink) {\n                            tagSectionLink.click();\n                        }\n                    }\n                } catch (error) {\n                    this.showErrorMessage(error.message);\n                } finally {\n                    tagger.removeAttribute('disabled');\n                    tagger.innerHTML = oldText;\n                }\n            });\n        }\n    }\n\n    showErrorMessage(message) {\n        const errorField = document.querySelector(Selectors.ELEMENTS.ERRORFIELD);\n        if (errorField) {\n            errorField.innerHTML = message;\n            errorField.style.display = 'block';\n        }\n    }\n\n    hideErrorMessage() {\n        const errorField = document.querySelector(Selectors.ELEMENTS.ERRORFIELD);\n        if (errorField) {\n            errorField.innerHTML = '';\n            errorField.style.display = 'none';\n        }\n    }\n}\n\nexport const init = (resourceID) => {\n    new AutoTag(resourceID);\n};\n"],"names":["AutoTag","constructor","resourceID","registerEventListeners","hideErrorMessage","tagger","document","querySelector","Selectors","ELEMENTS","AUTOTAGBUTTON","addEventListener","async","setAttribute","oldText","innerHTML","request","methodname","args","resourceid","this","responseObj","Ajax","call","error","showErrorMessage","exception","message","tagField","TAGFIELD","enterEvent","KeyboardEvent","code","key","charKode","keyCode","view","window","tag","value","dispatchEvent","tagSection","TAGSECTION","tagSectionLink","TAGSECTIONLINK","classList","contains","click","removeAttribute","errorField","ERRORFIELD","style","display"],"mappings":";;;;;;;0KA0BMA,QACFC,YAAYC,iBACHA,WAAaA,gBACbC,8BACAC,mBAGTD,+BACUE,OAASC,SAASC,cAAcC,mBAAUC,SAASC,eACrDL,QACAA,OAAOM,iBAAiB,SAASC,eAExBR,mBAELC,OAAOQ,aAAa,WAAY,kBAC1BC,QAAUT,OAAOU,UACvBV,OAAOU,UAAY,8CAEbC,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFC,WAAYC,KAAKlB,uBAKfmB,kBAAoBC,cAAKC,KAAK,CAACP,UAAU,MAC3CK,YAAYG,WACPC,iBAAiBJ,YAAYG,MAAME,UAAUC,aAC/C,OAEGC,SAAWtB,SAASC,cAAcC,mBAAUC,SAASoB,cAEtDD,sBAKCE,WAAa,IAAIC,cAAc,UAAW,CAC5CC,KAAM,QACNC,IAAK,QACLC,SAAU,GACVC,QAAS,GACTC,KAAMC,aAGL,MAAMC,OAAOjB,YACdO,SAASW,MAAQD,IACjBV,SAASY,cAAcV,kBAIrBW,WAAanC,SAASC,cAAcC,mBAAUC,SAASiC,YACvDC,eAAiBrC,SAASC,cAAcC,mBAAUC,SAASmC,gBAE7DH,aAAeA,WAAWI,UAAUC,SAAS,SAAWH,gBACxDA,eAAeI,SAGzB,MAAOvB,YACAC,iBAAiBD,MAAMG,iBAE5BtB,OAAO2C,gBAAgB,YACvB3C,OAAOU,UAAYD,YAMnCW,iBAAiBE,eACPsB,WAAa3C,SAASC,cAAcC,mBAAUC,SAASyC,YACzDD,aACAA,WAAWlC,UAAYY,QACvBsB,WAAWE,MAAMC,QAAU,SAInChD,yBACU6C,WAAa3C,SAASC,cAAcC,mBAAUC,SAASyC,YACzDD,aACAA,WAAWlC,UAAY,GACvBkC,WAAWE,MAAMC,QAAU,uBAKlBlD,iBACbF,QAAQE"}